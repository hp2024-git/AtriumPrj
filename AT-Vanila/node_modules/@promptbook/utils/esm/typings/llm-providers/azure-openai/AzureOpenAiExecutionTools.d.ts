import type { AvailableModel } from '../../execution/LlmExecutionTools';
import type { LlmExecutionTools } from '../../execution/LlmExecutionTools';
import type { PromptChatResult } from '../../execution/PromptResult';
import type { PromptCompletionResult } from '../../execution/PromptResult';
import type { Prompt } from '../../types/Prompt';
import type { AzureOpenAiExecutionToolsOptions } from './AzureOpenAiExecutionToolsOptions';
/**
 * Execution Tools for calling Azure OpenAI API.
 */
export declare class AzureOpenAiExecutionTools implements LlmExecutionTools {
    private readonly options;
    /**
     * OpenAI Azure API client.
     */
    private readonly client;
    /**
     * Creates OpenAI Execution Tools.
     *
     * @param options which are relevant are directly passed to the OpenAI client
     */
    constructor(options: AzureOpenAiExecutionToolsOptions);
    /**
     * Calls OpenAI API to use a chat model.
     */
    gptChat(prompt: Pick<Prompt, 'content' | 'modelRequirements'>): Promise<PromptChatResult>;
    /**
     * Calls Azure OpenAI API to use a complete model.
     */
    gptComplete(prompt: Pick<Prompt, 'content' | 'modelRequirements'>): Promise<PromptCompletionResult>;
    /**
     * Changes Azure error (which is not propper Error but object) to propper Error
     */
    private transformAzureError;
    /**
     * List all available Azure OpenAI models that can be used
     */
    listModels(): Promise<Array<AvailableModel>>;
}
/**
 * TODO: Maybe Create some common util for gptChat and gptComplete
 * TODO: Maybe make custom AzureOpenaiError
 */
