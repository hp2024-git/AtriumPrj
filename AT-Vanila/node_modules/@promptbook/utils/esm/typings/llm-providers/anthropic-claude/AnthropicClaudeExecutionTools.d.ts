import type { AvailableModel } from '../../execution/LlmExecutionTools';
import type { LlmExecutionTools } from '../../execution/LlmExecutionTools';
import type { PromptChatResult } from '../../execution/PromptResult';
import type { PromptCompletionResult } from '../../execution/PromptResult';
import type { Prompt } from '../../types/Prompt';
import type { AnthropicClaudeExecutionToolsOptions } from './AnthropicClaudeExecutionToolsOptions';
/**
 * Execution Tools for calling Anthropic Claude API.
 */
export declare class AnthropicClaudeExecutionTools implements LlmExecutionTools {
    private readonly options;
    /**
     * Anthropic Claude API client.
     */
    private readonly client;
    /**
     * Creates Anthropic Claude Execution Tools.
     *
     * @param options which are relevant are directly passed to the Anthropic Claude client
     */
    constructor(options: AnthropicClaudeExecutionToolsOptions);
    /**
     * Calls Anthropic Claude API to use a chat model.
     */
    gptChat(prompt: Pick<Prompt, 'content' | 'modelRequirements'>): Promise<PromptChatResult>;
    /**
     * Calls Anthropic Claude API to use a complete model.
     */
    gptComplete(prompt: Pick<Prompt, 'content' | 'modelRequirements'>): Promise<PromptCompletionResult>;
    /**
     * Default model for chat variant.
     */
    private getDefaultChatModel;
    /**
     * List all available Anthropic Claude models that can be used
     */
    listModels(): Array<AvailableModel>;
}
/**
 * TODO: [ðŸ§ ] Maybe handle errors via transformAnthropicError (like transformAzureError)
 * TODO: Maybe Create some common util for gptChat and gptComplete
 * TODO: Maybe make custom OpenaiError
 */
