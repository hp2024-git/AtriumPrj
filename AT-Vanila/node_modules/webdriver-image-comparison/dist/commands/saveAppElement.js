import afterScreenshot from '../helpers/afterScreenshot.js';
import { DEFAULT_RESIZE_DIMENSIONS } from '../helpers/constants.js';
import { takeBase64ElementScreenshot } from '../methods/images.js';
/**
 * Saves an element image for a native app
 */
export default async function saveAppElement(methods, instanceData, folders, element, tag, saveElementOptions, isNativeContext) {
    // 1. Set some variables
    const { formatImageName, savePerInstance, } = saveElementOptions.wic;
    const { executor, getElementRect, screenShot } = methods;
    const resizeDimensions = saveElementOptions.method.resizeDimensions || DEFAULT_RESIZE_DIMENSIONS;
    const { browserName, browserVersion, deviceName, devicePixelRatio, deviceScreenSize, isIOS, isMobile, logName, platformName, platformVersion, } = instanceData;
    // 2. Take the screenshot
    const base64Image = await takeBase64ElementScreenshot({
        element,
        devicePixelRatio,
        isIOS,
        methods: {
            getElementRect: getElementRect,
            screenShot,
        },
        resizeDimensions,
    });
    // 3.  The after the screenshot methods
    const afterOptions = {
        actualFolder: folders.actualFolder,
        base64Image,
        filePath: {
            browserName,
            deviceName,
            isMobile,
            savePerInstance,
        },
        fileName: {
            browserName,
            browserVersion,
            deviceName,
            devicePixelRatio: devicePixelRatio,
            formatImageName,
            isMobile,
            isTestInBrowser: !isNativeContext,
            logName,
            name: '',
            platformName,
            platformVersion,
            screenHeight: deviceScreenSize.height,
            screenWidth: deviceScreenSize.width,
            tag,
        },
        isNativeContext,
        isLandscape: false,
        platformName,
    };
    // 4.  Return the data
    return afterScreenshot(executor, afterOptions);
}
