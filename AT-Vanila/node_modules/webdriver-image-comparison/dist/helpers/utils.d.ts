import type { FormatFileNameOptions, GetAddressBarShadowPaddingOptions, GetAndCreatePathOptions, GetToolBarShadowPaddingOptions, ScreenshotSize } from './utils.interfaces.js';
/**
 * Get and create a folder
 */
export declare function getAndCreatePath(folder: string, options: GetAndCreatePathOptions): string;
/**
 * Format the filename
 */
export declare function formatFileName(options: FormatFileNameOptions): string;
/**
 * Checks if it is mobile
 */
export declare function checkIsMobile(platformName: string): boolean;
/**
 * Checks if the os is Android
 */
export declare function checkIsAndroid(platformName: string): boolean;
/**
 * Checks if the os is IOS
 */
export declare function checkIsIos(platformName: string): boolean;
/**
 * Checks if the test is executed in a browser
 */
export declare function checkTestInBrowser(browserName: string): boolean;
/**
 * Checks if the test is executed in a browser on a mobile phone
 */
export declare function checkTestInMobileBrowser(platformName: string, browserName: string): boolean;
/**
 * Checks if this is a native webscreenshot on android
 */
export declare function checkAndroidNativeWebScreenshot(platformName: string, nativeWebscreenshot: boolean): boolean;
/**
 * Checks if this is an Android chromedriver screenshot
 */
export declare function checkAndroidChromeDriverScreenshot(platformName: string, nativeWebScreenshot: boolean): boolean;
/**
 * Get the address bar shadow padding. This is only needed for Android native webscreenshot and iOS
 */
export declare function getAddressBarShadowPadding(options: GetAddressBarShadowPaddingOptions): number;
/**
 * Get the tool bar shadow padding. This is only needed for iOS
 */
export declare function getToolBarShadowPadding(options: GetToolBarShadowPaddingOptions): number;
/**
 * Calculate the data based on the device pixel ratio
 */
export declare function calculateDprData<T>(data: T, devicePixelRatio: number): T;
/**
 * Wait for an amount of milliseconds
 */
export declare function waitFor(milliseconds: number): Promise<void>;
/**
 * Get the size of a screenshot in pixels without the device pixel ratio
 */
export declare function getScreenshotSize(screenshot: string, devicePixelRation?: number): ScreenshotSize;
/**
 * Get the device pixel ratio
 */
export declare function getDevicePixelRatio(screenshot: string, deviceScreenSize: {
    height: number;
    width: number;
}): number;
/**
 * Get the iOS bezel image names
 */
export declare function getIosBezelImageNames(normalizedDeviceName: string): {
    topImageName: string;
    bottomImageName: string;
};
/**
 * Validate that the item is an object
 */
export declare function isObject(item: unknown): boolean;
/**
 * Validate if i's storybook
 */
export declare function isStorybook(): boolean;
//# sourceMappingURL=utils.d.ts.map