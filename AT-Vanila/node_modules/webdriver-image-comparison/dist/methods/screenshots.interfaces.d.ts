import type { Executor, TakeElementScreenshot, TakeScreenShot } from './methods.interfaces.js';
import type { RectanglesOutput } from './rectangles.interfaces.js';
export interface FullPageScreenshotsData {
    fullPageHeight: number;
    fullPageWidth: number;
    data: ScreenshotData[];
}
interface ScreenshotData {
    canvasWidth: number;
    canvasYPosition: number;
    imageHeight: number;
    imageWidth: number;
    imageXPosition: number;
    imageYPosition: number;
    screenshot: string;
}
export interface FullPageScreenshotDataOptions {
    addressBarShadowPadding: number;
    devicePixelRatio: number;
    fullPageScrollTimeout: number;
    hideAfterFirstScroll: (HTMLElement | HTMLElement[])[];
    innerHeight: number;
    isAndroid: boolean;
    isAndroidNativeWebScreenshot: boolean;
    isAndroidChromeDriverScreenshot: boolean;
    isHybridApp: boolean;
    isIOS: boolean;
    isLandscape: boolean;
    screenHeight: number;
    screenWidth: number;
    toolBarShadowPadding: number;
}
export interface FullPageScreenshotNativeMobileOptions {
    addressBarShadowPadding: number;
    devicePixelRatio: number;
    fullPageScrollTimeout: number;
    hideAfterFirstScroll: (HTMLElement | HTMLElement[])[];
    iosHomeBarY?: number;
    isLandscape?: boolean;
    innerHeight: number;
    safeArea: number;
    statusAddressBarHeight: number;
    toolBarShadowPadding: number;
    screenHeight: number;
    screenWidth: number;
    sideBarWidth: number;
}
export interface FullPageScreenshotOptions {
    devicePixelRatio: number;
    fullPageScrollTimeout: number;
    innerHeight: number;
    hideAfterFirstScroll: (HTMLElement | HTMLElement[])[];
}
export interface TakeWebElementScreenshot {
    devicePixelRatio?: number;
    element: any;
    executor: Executor;
    fallback?: boolean;
    innerHeight?: number;
    isAndroidNativeWebScreenshot: boolean;
    isAndroid: boolean;
    isIOS: boolean;
    isLandscape: boolean;
    screenShot: TakeScreenShot;
    takeElementScreenshot?: TakeElementScreenshot;
}
export interface TakeWebElementScreenshotData {
    base64Image: string;
    isWebDriverElementScreenshot: boolean;
    rectangles: RectanglesOutput;
}
export {};
//# sourceMappingURL=screenshots.interfaces.d.ts.map