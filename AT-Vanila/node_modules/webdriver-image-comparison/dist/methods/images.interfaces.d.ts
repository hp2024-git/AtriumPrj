import type { CanvasRenderingContext2D } from 'canvas';
import type { RectanglesOutput } from './rectangles.interfaces.js';
import type { Folders } from '../base.interfaces.js';
export interface ResizeDimensions {
    bottom?: number;
    left?: number;
    right?: number;
    top?: number;
}
export interface ImageCompareOptions {
    ignoreRegions?: RectanglesOutput[];
    devicePixelRatio: number;
    compareOptions: {
        wic: WicImageCompareOptions;
        method: ScreenMethodImageCompareCompareOptions;
    };
    fileName: string;
    folderOptions: ImageCompareFolderOptions;
    isHybridApp: boolean;
    isAndroid?: boolean;
    isLandscape: boolean;
    platformName: string;
    isAndroidNativeWebScreenshot: boolean;
}
export interface WicImageCompareOptions {
    blockOutSideBar: boolean;
    blockOutStatusBar: boolean;
    blockOutToolBar: boolean;
    ignoreAlpha: boolean;
    ignoreAntialiasing: boolean;
    ignoreColors: boolean;
    ignoreLess: boolean;
    ignoreNothing: boolean;
    rawMisMatchPercentage: boolean;
    returnAllCompareData: boolean;
    saveAboveTolerance: number;
}
export interface DefaultImageCompareCompareOptions extends MethodImageCompareCompareOptions {
    blockOut?: RectanglesOutput[];
}
export interface ScreenMethodImageCompareCompareOptions extends DefaultImageCompareCompareOptions, MethodImageCompareCompareOptions {
    blockOutSideBar?: boolean;
    blockOutStatusBar?: boolean;
    blockOutToolBar?: boolean;
}
export interface MethodImageCompareCompareOptions {
    blockOut?: RectanglesOutput[];
    ignoreAlpha?: boolean;
    ignoreAntialiasing?: boolean;
    ignoreColors?: boolean;
    ignoreLess?: boolean;
    ignoreNothing?: boolean;
    rawMisMatchPercentage?: boolean;
    returnAllCompareData?: boolean;
    saveAboveTolerance?: number;
    scaleImagesToSameSize?: boolean;
}
export interface ImageCompareFolderOptions extends Folders {
    autoSaveBaseline: boolean;
    browserName: string;
    deviceName: string;
    isMobile: boolean;
    savePerInstance: boolean;
}
export interface ImageCompareResult {
    fileName: string;
    folders: {
        actual: string;
        baseline: string;
        diff?: string;
    };
    misMatchPercentage: number;
}
export interface IgnoreBoxes {
    bottom: number;
    right: number;
    left: number;
    top: number;
}
export interface CroppedBase64Image {
    addIOSBezelCorners: boolean;
    base64Image: string;
    deviceName: string;
    devicePixelRatio: number;
    isWebDriverElementScreenshot?: boolean;
    isIOS: boolean;
    isLandscape: boolean;
    rectangles: RectanglesOutput;
    resizeDimensions?: ResizeDimensions;
}
export interface RotateBase64ImageOptions {
    base64Image: string;
    degrees: number;
    newHeight: number;
    newWidth: number;
}
export interface CropAndConvertToDataURL {
    addIOSBezelCorners: boolean;
    base64Image: string;
    deviceName: string;
    devicePixelRatio: number;
    height: number;
    isIOS: boolean;
    isLandscape: boolean;
    sourceX: number;
    sourceY: number;
    width: number;
}
export interface AdjustedAxis {
    length: number;
    maxDimension: number;
    paddingEnd: number;
    paddingStart: number;
    start: number;
    warningType: 'WIDTH' | 'HEIGHT';
}
export interface DimensionsWarning {
    dimension: number;
    maxDimension: number;
    position: number;
    type: string;
}
export interface RotatedImage {
    isWebDriverElementScreenshot: boolean;
    isLandscape: boolean;
    base64Image: string;
}
export interface HandleIOSBezelCorners {
    addIOSBezelCorners: boolean;
    ctx: CanvasRenderingContext2D;
    deviceName: string;
    devicePixelRatio: number;
    height: number;
    isLandscape: boolean;
    width: number;
}
//# sourceMappingURL=images.interfaces.d.ts.map