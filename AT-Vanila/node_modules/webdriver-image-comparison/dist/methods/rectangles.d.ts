import type { ChainablePromiseElement } from 'webdriverio';
import type { ElementRectangles, RectanglesOutput, ScreenRectanglesOptions, StatusAddressToolBarRectangles, StatusAddressToolBarRectanglesOptions } from './rectangles.interfaces.js';
import type { Executor, GetElementRect } from './methods.interfaces.js';
import type { CheckScreenMethodOptions } from '../commands/screen.interfaces.js';
import type { InstanceData } from './instanceData.interfaces.js';
/**
 * Determine the element rectangles on the page / screenshot
 */
export declare function determineElementRectangles({ executor, base64Image, options, element, }: ElementRectangles): Promise<RectanglesOutput>;
/**
 * Determine the rectangles of the screen for the screenshot
 */
export declare function determineScreenRectangles(base64Image: string, options: ScreenRectanglesOptions): RectanglesOutput;
/**
 * Determine the rectangles for the mobile devices
 */
export declare function determineStatusAddressToolBarRectangles(executor: Executor, options: StatusAddressToolBarRectanglesOptions): Promise<StatusAddressToolBarRectangles>;
/**
 * Validate that the element is a WebdriverIO element
 */
export declare function isWdioElement(x: unknown): boolean;
/**
 * Translate ignores to regions
 */
export declare function determineIgnoreRegions(ignores: (RectanglesOutput | WebdriverIO.Element | ChainablePromiseElement<WebdriverIO.Element>)[], getElementRect: GetElementRect): Promise<RectanglesOutput[]>;
/**
 * Determine the device block outs
 */
export declare function determineDeviceBlockOuts({ isAndroid, screenCompareOptions, instanceData }: {
    isAndroid: boolean;
    screenCompareOptions: CheckScreenMethodOptions;
    instanceData: InstanceData;
}): Promise<RectanglesOutput[]>;
//# sourceMappingURL=rectangles.d.ts.map